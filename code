# prototype


import pygame
import random

pygame.init()

# Screen settings
WIDTH, HEIGHT = 1000, 700
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Elemental Clash")

font = pygame.font.SysFont("Sans Serif", 40)
small_font = pygame.font.SysFont("Sans Serif", 30)

# Elements and colors
ELEMENTS = ["Fire", "Water", "Earth"]
element_colors = {
    "Fire": (255, 100, 100),
    "Water": (100, 100, 255),
    "Earth": (100, 200, 100),
    "Wild": (255, 255, 100)
}

# Load and scale images
def load_card(path):
    img = pygame.image.load(path)
    return pygame.transform.scale(img, (100, 150))

background = pygame.transform.scale(pygame.image.load("assets/background.png"), (WIDTH, HEIGHT))
fire_img  = load_card("assets/fire_card.png")
water_img = load_card("assets/water_card.png")
earth_img = load_card("assets/earth_card.png")
wild_img  = load_card("assets/wild_card.png")

# Buttons & UI rects
play_button  = pygame.Rect(WIDTH//2 - 100, HEIGHT//2 - 100, 200, 50)
rules_button = pygame.Rect(WIDTH//2 - 100, HEIGHT//2,       200, 50)
quit_button  = pygame.Rect(WIDTH//2 - 100, HEIGHT//2 + 100, 200, 50)
back_button  = pygame.Rect(WIDTH//2 - 50,  HEIGHT - 100,    100, 40)
reset_button = pygame.Rect(WIDTH//2 - 120, HEIGHT - 80,     100, 40)
fire_button  = pygame.Rect(WIDTH//2 - 150, HEIGHT//2 + 160, 80, 40)
water_button = pygame.Rect(WIDTH//2 - 40,  HEIGHT//2 + 160, 80, 40)
earth_button = pygame.Rect(WIDTH//2 + 70,  HEIGHT//2 + 160, 80, 40)
battle_box   = pygame.Rect(WIDTH//2 - 200, HEIGHT//2 - 100, 400, 200)

# Game state
player_hand = []
ai_hand     = []
player_wins = {e:0 for e in ELEMENTS}
ai_wins     = {e:0 for e in ELEMENTS}

selected_card = None
ai_card       = None
round_result  = ""
game_over     = False
winner_text   = ""
choose_element_mode = False
running       = True
in_main_menu  = True
in_rules      = False

clock = pygame.time.Clock()

# Card utilities
def create_random_card_data():
    if random.random() < 0.03:
        return {"element": "Wild", "number": random.randint(1, 10)}
    else:
        return {"element": random.choice(ELEMENTS), "number": random.randint(1, 10)}

def create_card(data, x, y):
    return {"data": data, "rect": pygame.Rect(x, y, 100, 150)}

def draw_card(card):
    elem = card["data"]["element"]
    img  = {"Fire":fire_img, "Water":water_img, "Earth":earth_img, "Wild":wild_img}[elem]
    screen.blit(img, card["rect"].topleft)
    screen.blit(small_font.render(elem, True, (0,0,0)), (card["rect"].x+10, card["rect"].y+160))
    screen.blit(small_font.render(str(card["data"]["number"]), True, (0,0,0)), (card["rect"].x+10, card["rect"].y+190))

def draw_text(txt, x, y, col=(255,255,255)):
    screen.blit(font.render(txt, True, col), (x, y))

# Battle logic
def get_result(p, a):
    e1, e2 = p["element"], a["element"]
    n1, n2 = p["number"], a["number"]
    if e1 == "Wild" and e2 != "Wild": return "Player"
    if e2 == "Wild" and e1 != "Wild": return "AI"
    if e1 == e2:
        if n1 > n2: return "Player"
        if n2 > n1: return "AI"
        return "Draw"
    wins = {"Fire":"Earth", "Water":"Fire", "Earth":"Water"}
    return "Player" if wins[e1] == e2 else "AI"

def evaluate_strength(c):
    scores = {"Fire":3, "Water":2, "Earth":1, "Wild":5}
    return scores[c["data"]["element"]]*10 + c["data"]["number"]

def ai_select_card(player_card, hand):
    # 1. Play Wild if available
    for c in hand:
        if c["data"]["element"] == "Wild":
            return c
    # 2. Complete a set of 3
    for e in ELEMENTS:
        if ai_wins[e] == 2:
            choices = [c for c in hand if c["data"]["element"] == e]
            if choices:
                return max(choices, key=lambda c: c["data"]["number"])
    # 3. Block player's imminent 3rd
    for e in ELEMENTS:
        if player_wins[e] == 2:
            wilds = [c for c in hand if c["data"]["element"] == "Wild"]
            if wilds:
                return wilds[0]
            break
    # 4. Counter the specific card played
    counters = [c for c in hand if get_result(c["data"], player_card["data"]) == "AI"]
    if counters:
        best = max(counters, key=evaluate_strength)
    else:
        best = max(hand, key=evaluate_strength)
    # 5. 10% randomness
    if random.random() < 0.1:
        return random.choice(hand)
    return best

def check_winner():
    for scores, label in ((player_wins, "Player"), (ai_wins, "AI")):
        if any(v >= 3 for v in scores.values()) or all(v >= 1 for v in scores.values()):
            return label
    return None

# Deal initial hands
def deal_hand():
    global player_hand, ai_hand
    player_hand.clear()
    ai_hand.clear()
    spacing = (WIDTH - 6*100) // 7
    for i in range(6):
        x = spacing + i*(100+spacing)
        player_hand.append(create_card(create_random_card_data(), x, HEIGHT-220))
        ai_hand.append(create_card(create_random_card_data(), x, HEIGHT-380))

deal_hand()

# Main loop
while running:
    for evt in pygame.event.get():
        if evt.type == pygame.QUIT:
            running = False

        # Main menu
        if in_main_menu:
            if evt.type == pygame.MOUSEBUTTONDOWN:
                if play_button.collidepoint(evt.pos):
                    in_main_menu = False
                elif rules_button.collidepoint(evt.pos):
                    in_rules = True
                    in_main_menu = False
                elif quit_button.collidepoint(evt.pos):
                    running = False

        # Rules screen
        elif in_rules:
            if evt.type == pygame.MOUSEBUTTONDOWN and back_button.collidepoint(evt.pos):
                in_rules = False
                in_main_menu = True

        # Gameplay
        else:
            if not game_over and evt.type == pygame.MOUSEBUTTONDOWN:
                # If choosing element for a Wild
                if choose_element_mode:
                    if fire_button.collidepoint(evt.pos):
                        player_wins["Fire"] += 1
                    elif water_button.collidepoint(evt.pos):
                        player_wins["Water"] += 1
                    elif earth_button.collidepoint(evt.pos):
                        player_wins["Earth"] += 1
                    choose_element_mode = False
                    w = check_winner()
                    if w:
                        game_over = True
                        winner_text = f"{w} Wins the Game!"
                else:
                    # Player card click
                    for i, card in enumerate(player_hand):
                        if card["rect"].collidepoint(evt.pos):
                            selected_card = create_card(card["data"],
                                                        battle_box.x+50,
                                                        battle_box.y+25)
                            if card["data"]["element"] == "Wild":
                                choose_element_mode = True
                            else:
                                ai_choice = ai_select_card(card, ai_hand)
                                ai_card = create_card(ai_choice["data"],
                                                      battle_box.x+250,
                                                      battle_box.y+25)
                                result = get_result(card["data"], ai_choice["data"])
                                if result == "Player":
                                    player_wins[card["data"]["element"]] += 1
                                elif result == "AI":
                                    if ai_choice["data"]["element"] == "Wild":
                                        # AI's Wild => choose strongest element
                                        best_elem = max(ELEMENTS, key=lambda e: ai_wins[e])
                                        ai_wins[best_elem] += 1
                                    else:
                                        ai_wins[ai_choice["data"]["element"]] += 1
                                    w = check_winner()
                                    if w:
                                        game_over = True
                                        winner_text = f"{w} Wins the Game!"
                            # Refill player's slot
                            player_hand[i] = create_card(create_random_card_data(),
                                                         card["rect"].x,
                                                         card["rect"].y)
                            break

            # Reset / Quit after game over
            elif game_over and evt.type == pygame.MOUSEBUTTONDOWN:
                if reset_button.collidepoint(evt.pos):
                    player_wins = {e:0 for e in ELEMENTS}
                    ai_wins     = {e:0 for e in ELEMENTS}
                    selected_card = ai_card = None
                    game_over = False
                    deal_hand()
                elif quit_button.collidepoint(evt.pos):
                    running = False

    # Draw
    if in_main_menu:
        screen.fill((30,30,60))
        draw_text("Elemental Clash", WIDTH//2-140, HEIGHT//2-200)
        pygame.draw.rect(screen, (100,200,100), play_button)
        pygame.draw.rect(screen, (100,100,200), rules_button)
        pygame.draw.rect(screen, (200,100,100), quit_button)
        draw_text("Play", play_button.x+70, play_button.y+10)
        draw_text("Rules", rules_button.x+65, rules_button.y+10)
        draw_text("Quit", quit_button.x+70, quit_button.y+10)

    elif in_rules:
        screen.fill((30,30,60))
        draw_text("Rules", WIDTH//2-30, 50)
        rules = [
            "Each card: Fire, Water, Earth, or Wild",
            "Fire > Earth, Earth > Water, Water > Fire",
            "Number 1â€“10 breaks ties",
            "Wild beats any card, then you choose its element",
            "Win by 3 of one element or 1 of each"
        ]
        y = 120
        for line in rules:
            draw_text(line, WIDTH//5-200, y)
            y += 50
        pygame.draw.rect(screen, (200,200,200), back_button)
        draw_text("Back", back_button.x+20, back_button.y+10)

    else:
        screen.blit(background, (0,0))
        # Scoreboard
        draw_text(f"Fire: {player_wins['Fire']} | Water: {player_wins['Water']} | Earth: {player_wins['Earth']}",
                  10, 10)
        draw_text(f"AI Fire: {ai_wins['Fire']} | AI Water: {ai_wins['Water']} | AI Earth: {ai_wins['Earth']}",
                  10, 40)

        # Battle zone
        pygame.draw.rect(screen, (50,50,50), battle_box)
        pygame.draw.rect(screen, (255,255,255), battle_box, 2)
        draw_text("Battle Zone", battle_box.x+130, battle_box.y-30)

        # Hands & played cards
        for c in player_hand: draw_card(c)
        if selected_card: draw_card(selected_card)
        if ai_card: draw_card(ai_card)

        # Wild element choice buttons
        if choose_element_mode:
            for btn, elem in ((fire_button,"Fire"), (water_button,"Water"), (earth_button,"Earth")):
                pygame.draw.rect(screen, element_colors[elem], btn)
                draw_text(elem, btn.x+10, btn.y+5)

        # Game over menu
        if game_over:
            draw_text(winner_text, WIDTH//2 - 100, HEIGHT//2 - 50)
            pygame.draw.rect(screen, (100,200,100), reset_button)
            pygame.draw.rect(screen, (200,100,100), quit_button)
            draw_text("Reset", reset_button.x+20, reset_button.y+10)
            draw_text("Quit", quit_button.x+30, quit_button.y+10)

    pygame.display.flip()
    clock.tick(60)

pygame.quit()
